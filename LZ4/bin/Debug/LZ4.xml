<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LZ4</name>
    </assembly>
    <members>
        <member name="T:LZ4.LZ4Stream">
            <summary>Block compression stream. Allows to use LZ4 for stream compression.</summary>
        </member>
        <member name="T:LZ4.LZ4Stream.ChunkFlags">
            <summary>
            Flags of a chunk. Please note, this 
            </summary>
        </member>
        <member name="F:LZ4.LZ4Stream.ChunkFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream.ChunkFlags.Compressed">
            <summary>Set if chunk is compressed.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream.ChunkFlags.HighCompression">
            <summary>Set if high compression has been selected (does not affect decoder, 
            but might be useful when rewriting)</summary>
        </member>
        <member name="F:LZ4.LZ4Stream.ChunkFlags.Passes">
            <summary>3 bits for number of passes. Currently only 1 pass (value 0) 
            is supported.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._innerStream">
            <summary>The inner stream.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._compressionMode">
            <summary>The compression mode.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._highCompression">
            <summary>The high compression flag (compression only).</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._blockSize">
            <summary>The block size (compression only).</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._buffer">
            <summary>The buffer.</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._bufferLength">
            <summary>The buffer length (can be different then _buffer.Length).</summary>
        </member>
        <member name="F:LZ4.LZ4Stream._bufferOffset">
            <summary>The offset in a buffer.</summary>
        </member>
        <member name="M:LZ4.LZ4Stream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:LZ4.LZ4Stream" /> class.</summary>
            <param name="innerStream">The inner stream.</param>
            <param name="compressionMode">The compression mode.</param>
            <param name="highCompression">if set to <c>true</c> [high compression].</param>
            <param name="blockSize">Size of the block.</param>
        </member>
        <member name="M:LZ4.LZ4Stream.NotSupported(System.String)">
            <summary>Returns NotSupportedException.</summary>
            <param name="operationName">Name of the operation.</param>
            <returns>NotSupportedException</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.EndOfStream">
            <summary>Returns EndOfStreamException.</summary>
            <returns>EndOfStreamException</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)">
            <summary>Tries to read variable length int.</summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if integer has been read, <c>false</c> if end of stream has been
            encountered. If end of stream has been encoutered in the middle of value 
            <see cref="T:System.IO.EndOfStreamException"/> is thrown.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.ReadVarInt">
            <summary>Reads the variable length int. Work with assumption that value is in the stream
            and throws exception if it isn't. If you want to check if value is in the stream
            use <see cref="M:LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)"/> instead.</summary>
            <returns></returns>
        </member>
        <member name="M:LZ4.LZ4Stream.ReadBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads the block of bytes. 
            Contrary to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> does not read partial data if possible. 
            If there is no data (yet) it waits.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.WriteVarInt(System.UInt64)">
            <summary>Writes the variable length integer.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LZ4.LZ4Stream.FlushCurrentChunk">
            <summary>Flushes current chunk.</summary>
        </member>
        <member name="M:LZ4.LZ4Stream.AcquireNextChunk">
            <summary>Reads the next chunk from stream.</summary>
            <returns><c>true</c> if next has been read, or <c>false</c> if it is legitimate end of file.
            Throws <see cref="T:System.IO.EndOfStreamException"/> if end of stream was unexpected.</returns>
        </member>
        <member name="P:LZ4.LZ4Stream.CanRead">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:LZ4.LZ4Stream.CanSeek">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:LZ4.LZ4Stream.CanWrite">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.Flush">
            <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="P:LZ4.LZ4Stream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:LZ4.LZ4Stream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.ReadByte">
            <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:LZ4.LZ4Stream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:LZ4.LZ4Stream.WriteByte(System.Byte)">
            <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:LZ4.LZ4Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:LZ4.LZ4Stream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:LZ4.LZ4Codec">
            <summary>
                LZ4 codec selecting best implementation depending on platform.
            </summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Encoder">
            <summary>Encoding service.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.EncoderHC">
            <summary>Encoding service for HC algorithm.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Decoder">
            <summary>Decoding service.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.#cctor">
            <summary>Initializes the <see cref="T:LZ4.LZ4Codec" /> class.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.Has2010Runtime">
            <summary>Determines whether VS2010 runtime is installed.</summary>
            <returns><c>true</c> it VS2010 runtime is installed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Try(System.Action)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Try``1">
            <summary>Tries to create a specified <seealso cref="T:LZ4.ILZ4Service" /> and tests it.</summary>
            <typeparam name="T">Concrete <seealso cref="T:LZ4.ILZ4Service" /> type.</typeparam>
            <returns>A service if suceeded or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.AutoTest(LZ4.ILZ4Service)">
            <summary>Perofrms the quick auto-test on given compression service.</summary>
            <param name="service">The service.</param>
            <returns>A service or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4mm">
            <summary>Initializes codecs from LZ4mm.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4cc">
            <summary>Initializes codecs from LZ4cc.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4n">
            <summary>Initializes codecs from LZ4n.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4s">
            <summary>Initializes codecs from LZ4s.</summary>
        </member>
        <member name="P:LZ4.LZ4Codec.CodecName">
            <summary>Gets the name of selected codec(s).</summary>
            <value>The name of the codec.</value>
        </member>
        <member name="M:LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Get maximum output length.</summary>
            <param name="inputLength">Input length.</param>
            <returns>Output length.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Poke4(System.Byte[],System.Int32,System.UInt32)">
            <summary>Sets uint32 value in byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Peek4(System.Byte[],System.Int32)">
            <summary>Gets uint32 from byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="highCompression">if set to <c>true</c> uses high compression.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.WrapHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses (with high compression algorithm) and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Unwrap(System.Byte[],System.Int32)">
            <summary>Unwraps the specified compressed buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <returns>Uncompressed buffer.</returns>
            <exception cref="T:System.ArgumentException">
                inputBuffer size is invalid or inputBuffer size is invalid or has been corrupted
            </exception>
        </member>
    </members>
</doc>
